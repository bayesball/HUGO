lb = phat - 1.96 * se,
ub = phat + 1.96 * se)
fl2 %>%
mutate(phat = H / AB,
se = sqrt(phat * (1 - phat) / AB),
lb = phat - 1.96 * se,
ub = phat + 1.96 * se) -> fl2
ggplot(fl2, aes(Year, phat)) +
geom_point()
?geom_errorbar
ggplot(fl2, aes(Year, phat)) +
geom_point() +
geom_errorbar(aes(ymin = lb, ymax = ub))
ggplot(fl2, aes(Year, phat)) +
geom_point() +
geom_errorbar(aes(ymin = lb, ymax = ub),
width = 0.2)
library(CalledStrike)
ggplot(fl2, aes(Year, phat)) +
geom_point() +
geom_errorbar(aes(ymin = lb, ymax = ub),
width = 0.2)
ggplot(fl2, aes(Year, phat)) +
geom_point() +
geom_errorbar(aes(ymin = lb, ymax = ub),
width = 0.2) +
increasefont()
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBayes/inst/shiny-examples/ChooseBetaNew2')
ggplot(fl2, aes(Year, phat)) +
geom_point() +
geom_errorbar(aes(ymin = lb, ymax = ub),
width = 0.2) +
increasefont() +
ggtitle("Error Bounds for Lindor's True BA") +
centertitle() +
ylab("P")
ggplot(fl2, aes(Year, phat)) +
geom_point(color = "red", size = 4) +
geom_errorbar(aes(ymin = lb, ymax = ub),
width = 0.2) +
increasefont() +
ggtitle("Error Bounds for Lindor's True BA") +
centertitle() +
ylab("P")
ggplot(fl2, aes(Year, phat)) +
geom_point(color = "red", size = 4) +
geom_errorbar(aes(ymin = lb, ymax = ub),
width = 0.2,
color = "brown") +
increasefont() +
ggtitle("Error Bounds for Lindor's True BA") +
centertitle() +
ylab("P")
ggplot(fl2, aes(Year, phat)) +
geom_point(color = "red", size = 4) +
geom_errorbar(aes(ymin = lb, ymax = ub),
width = 0.2,
color = "brown") +
increasefont() +
ggtitle("Error Bounds for Francisco Lindor's True BA") +
centertitle() +
ylab("P")
fl2
(fl %>%
filter(Year <= 2021) %>%
select(Year, H, AB) -> fl3)
(fl %>%
filter(Year == 2021) %>%
select(Year, H, AB) -> fl3)
fl
fl <- read_csv("lindor.csv")
fl
View(fl)
fl <- read_csv("lindor.csv")
View(fl)
setwd("~/Dropbox/2021 WORK/Statcast2021")
# code to collect Statcast 2021 data
library(tidyverse)
library(lubridate)
source("scrape_sc_2021.R")
start <- ymd("2021-03-31")
today <- ymd(substr(Sys.time(), 1, 10))
day_number <- today - start - 1
last_day_collected <- 87
(collection_days <- day_number -
last_day_collected)
for(j in 1:collection_days){
scrape_sc_2021(last_day_collected + j,
last_day_collected + j)
}
statcast2021 <- read.csv("data/statcast2021.csv")
statcast2021 %>%
filter(type == "X") %>%
select(game_year, Game_Date,
launch_angle, launch_speed,
events) -> sc2021
write_csv(sc2021,
"~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/HomeRuns2021/statcast2021.csv")
table(statcast2021$Game_Date)
sum(statcast2021$event == "home_run", na.rm = TRUE)
setwd("~/Dropbox/2021 WORK/BAYES BASEBALL")
library(tidyverse)
d <- read_csv("priorwork/lindor")
library(tidyverse)
d <- read_csv("priorwork/lindor.csv")
select(d, Year, AB, H)
library(tidyverse)
library(CalledStrike)
fl <- read_csv("priorwork/lindor.csv")
select(fl, Year, AB, H)
fl %>%
mutate(phat = H / AB,
se = sqrt(phat * (1 - phat) / AB),
lb = phat - 1.96 * se,
ub = phat + 1.96 * se) -> fl2
ggplot(fl, aes(Year, phat)) +
geom_point(color = "red", size = 4) +
geom_errorbar(aes(ymin = lb, ymax = ub),
width = 0.2,
color = "brown") +
increasefont() +
ggtitle("Error Bounds for Francisco Lindor's True BA") +
centertitle() +
ylab("P")
fl %>%
mutate(phat = H / AB,
se = sqrt(phat * (1 - phat) / AB),
lb = phat - 1.96 * se,
ub = phat + 1.96 * se) -> fl
ggplot(fl, aes(Year, phat)) +
geom_point(color = "red", size = 4) +
geom_errorbar(aes(ymin = lb, ymax = ub),
width = 0.2,
color = "brown") +
increasefont() +
ggtitle("Error Bounds for Francisco Lindor's True BA") +
centertitle() +
ylab("P")
![](priorwork/capture1.png)
runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBayes/inst/shiny-examples/ChooseBetaNew2')
library(tidyverse)
library(CalledStrike)
fl <- read_csv("priorwork/lindor.csv")
fr %>%
mutate(BA = round(H / AB, 3)) %>%
select(fl, Year, AB, H, BA)
170 / (170 + 495)
295 / 72
265/72
162 - 73
89 * 3.68
setwd("~/Dropbox/2021 WORK/Statcast2021")
# code to collect Statcast 2021 data
library(tidyverse)
library(lubridate)
source("scrape_sc_2021.R")
start <- ymd("2021-03-31")
today <- ymd(substr(Sys.time(), 1, 10))
day_number <- today - start - 1
last_day_collected <- 88
(collection_days <- day_number -
last_day_collected)
for(j in 1:collection_days){
scrape_sc_2021(last_day_collected + j,
last_day_collected + j)
}
statcast2021 <- read.csv("data/statcast2021.csv")
statcast2021 %>%
filter(type == "X") %>%
select(game_year, Game_Date,
launch_angle, launch_speed,
events) -> sc2021
write_csv(sc2021,
"~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/HomeRuns2021/statcast2021.csv")
table(statcast2021$Game_Date)
sum(statcast2021$event == "home_run", na.rm = TRUE)
shiny::runApp('~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/ShinyBaseball/ShinyBaseball/inst/shiny-examples/PredictingBattingRates')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
runApp('~/Dropbox/2021 WORK/HR work - 2021/logit_comparison')
install.packages(c("DBI", "igraph", "openssl", "pkgbuild", "RcppArmadillo", "rstan", "sf", "shinyjs", "tinytex", "V8"))
library(devtools)
devtools:install()
devtools::install()
browseVignettes()
browseVignettes(package = "ShinyBaseball")
install.packages(c("latex2exp", "magrittr", "osmdata", "pillar", "RcppArmadillo", "reticulate", "rpart", "yaml"))
library(CareerTrajectoryGraphs)
FanGraphsBatting()
library(ShinyBayes)
BetaBinomialABC()
library(ShinyBayes)
BetaBinomialABC()
BetaBinomialJAGS()
ChooseBeta()
library(ShinyBayes)
ChooseBeta()
ChooseBetaNew()
runApp('inst/shiny-examples/ChooseBeta')
library(ShinyBayes)
ChooseBeta()
DiscreteP()
Discrete_TwoP()
HowardPrior()
Triplot()
runApp('inst/shiny-examples/ChooseBetaNew2')
runApp('inst/shiny-examples/ChooseBetaNew')
runApp('inst/shiny-examples/ChooseBetaNew')
runApp('inst/shiny-examples/ChooseBeta')
runApp('inst/shiny-examples/ChooseBetaNew')
runApp('inst/shiny-examples/ChooseBetaNew2')
TwoProportions()
NormalNormal()
runApp('inst/shiny-examples/ChooseBeta')
runApp('inst/shiny-examples/ChooseBetaNew2')
install.packages(c("bayesplot", "commonmark", "greta", "Rcpp", "rmarkdown", "runjags", "sf", "survival"))
library(readr)
library(dplyr)
library(lme4)
library(ggplot2)
library(posterior)
library(gridExtra)
load("~/Dropbox/Google Drive/Retrosheet/pbp.2021.Rdata")
fg_guts <-
read_csv("https://raw.githubusercontent.com/bayesball/HomeRuns2021/main/fg_guts.csv")
d2021 %>%
filter(BAT_EVENT_FL == TRUE) %>%
select(PIT_ID, BAT_ID, EVENT_CD) %>%
mutate(Season = 2021) -> d2021a
d2021a %>%
inner_join(fg_guts, by = "Season") %>%
mutate(WT = wBB * (EVENT_CD %in% 14:15) +
wHBP * (EVENT_CD == 16) +
w1B * (EVENT_CD == 20) +
w2B * (EVENT_CD == 21) +
w3B * (EVENT_CD == 22) +
wHR * (EVENT_CD == 23)) %>%
select(PIT_ID, BAT_ID, EVENT_CD, WT) -> d2021a
fitB <- lmer(WT ~ 1 + (1 | PIT_ID) + (1 | BAT_ID),
data = d2021a)
var(fitB)
VarCorr(fitB)
RE  <- ranef(fitB)
head(RE$BAT_ID)
# create data frames of random effect estimates
S_batter <- data.frame(Var = row.names(RE$BAT_ID),
mean = RE$BAT_ID)
head(S_batter)
str(RE$BAT_ID)
# create data frames of random effect estimates
S_batter <- data.frame(Var = row.names(RE$BAT_ID),
mean = RE$BAT_ID[, 1])
head(S_batter)
S_pitcher <- data.frame(Var = row.names(RE$PIT_ID),
mean = RE$PIT_ID[, 1])
# collect PA and raw wOBA estimates
d2021a %>%
group_by(PIT_ID) %>%
summarize(PA = n(),
Estimate = mean(WT)) ->
pitcher_estimates
d2021a %>%
group_by(BAT_ID) %>%
summarize(PA = n(),
Estimate = mean(WT)) ->
batter_estimates
inner_join(batter_estimates, S_batter,
by = c("BAT_ID" = "Var")) ->
batter_estimates
inner_join(pitcher_estimates, S_pitcher,
by = c("PIT_ID" = "Var")) ->
pitcher_estimates
head(batter_estimates)
head(pitcher_estimates)
centertitle <- function(){
theme(plot.title = element_text(colour = "blue",
size = 18,
hjust = 0.5,
vjust = 0.8,
angle = 0))
}
increasefont <-function(){
theme(text=element_text(size=18))
}
# scatterplot of raw wOBA estimates and random effects
ggplot(pitcher_estimates,
aes(Estimate, mean, color = PA)) +
geom_point() +
increasefont()
# plot of raw wOBA and random effects against PA
p1 <- ggplot(pitcher_estimates, aes(PA, Estimate)) +
geom_point() +
increasefont() +
centertitle() +
ggtitle("Raw Pitcher Estimates")
p2 <- ggplot(pitcher_estimates, aes(PA, mean)) +
geom_point() +
geom_smooth(color = "blue") +
geom_hline(yintercept = 0, color = "red") +
increasefont() +
centertitle() +
ggtitle("Pitcher Random Effects") +
ylab("Random Effect")
grid.arrange(p1, p2)
q1 <- ggplot(batter_estimates, aes(PA, Estimate)) +
geom_point() +
increasefont() +
centertitle() +
ggtitle("Raw Batter Estimates")
q2 <- ggplot(batter_estimates, aes(PA, mean)) +
geom_point() +
geom_smooth(color = "blue") +
geom_hline(yintercept = 0, color = "red") +
increasefont() +
centertitle() +
ggtitle("Batter Random Effects") +
ylab("Random Effect")
grid.arrange(q1, q2)
inner_join(pitcher_estimates,
select(Master, retroID,
nameFirst, nameLast),
by = c("PIT_ID" = "retroID")) %>%
mutate(Name = paste(nameFirst, nameLast)) %>%
select(Name, PA, Estimate, mean) ->
pitcher_estimates
inner_join(batter_estimates,
select(Master, retroID,
nameFirst, nameLast),
by = c("BAT_ID" = "retroID")) %>%
mutate(Name = paste(nameFirst, nameLast)) %>%
select(Name, PA, Estimate, mean) ->
batter_estimates
pitcher_estimates %>%
arrange(mean) %>%
head(10)
library(Lahman)
inner_join(pitcher_estimates,
select(Master, retroID,
nameFirst, nameLast),
by = c("PIT_ID" = "retroID")) %>%
mutate(Name = paste(nameFirst, nameLast)) %>%
select(Name, PA, Estimate, mean) ->
pitcher_estimates
inner_join(batter_estimates,
select(Master, retroID,
nameFirst, nameLast),
by = c("BAT_ID" = "retroID")) %>%
mutate(Name = paste(nameFirst, nameLast)) %>%
select(Name, PA, Estimate, mean) ->
batter_estimates
pitcher_estimates %>%
arrange(mean) %>%
head(10)
batter_estimates %>%
arrange(desc(mean)) %>%
head(10)
install.packages("runjags")
library(CalledStrike)
PitchValue()
ShinyBaseball()
library(ShinyBaseball)
PitchValue()
library(CalledStrike)
PitchValue()
install.packages(c("cli", "dplyr", "ggplot2", "httr", "igraph", "knitr", "Lahman", "MASS", "nloptr", "rmarkdown", "testthat", "tibble", "uuid"))
install.packages("runjags")
library(ShinyBayes)
BetaBinomial()
BetaBinomialJAGS()
install.packages("~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Downloads/runjags_2.0.3-2_JAGS4.tgz", repos = NULL, type = .Platform$pkgType)
BetaBinomialJAGS()
install.packages("~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Downloads/runjags_2.0.3-2_JAGS4.tgz", repos = NULL, type = .Platform$pkgType)
library(ggdensity)
ctablepost <- function (theta1, theta2, data){
s1 = data[1]
f1 = data[2]
s2 = data[3]
f2 = data[4]
logitp1 = (theta1 + theta2)/2
logitp2 = (theta2 - theta1)/2
term1 = s1 * logitp1 - (s1 + f1) * log(1 + exp(logitp1))
term2 = s2 * logitp2 - (s2 + f2) * log(1 + exp(logitp2))
return(exp(term1 + term2))
}
ggplot() +
geom_hdr_fun(aes(fill = after_stat(probs)),
alpha = 1,
fun = ctablepost,
args = list(data = c(5, 10, 8, 2)),
xlim = c(-10, 10),
ylim = c(-10, 10)) +
geom_hdr_rug()
install.packages(c("curl", "datawizard", "dotCall64", "evaluate", "gert", "ggforce", "isoband", "jsonlite", "lifecycle", "metR", "parameters", "parsnip", "purrr", "RCurl", "readr", "rmarkdown", "testthat", "tune", "vroom", "XML"))
library(ShinyBaseball)
LogitHomeRunRates()
14253.85 - 400 - 39 - 242.21 - 109.64
setwd("~/Dropbox/My Mac (MacBook-Air.attlocal.net)/Documents/GitHub/HUGO")
1 + 2
sqrt(2)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(Lahman)
library(dplyr)
library(ggplot2)
Batting %>%
filter(yearID >= 1990,
yearID <= 2020) %>%
group_by(playerID) %>%
summarize(H = sum(H),
AB = sum(AB)) -> S
head(S)
S %>%
filter(AB >= 1000) -> S1000
head(S1000)
S1000 %>%
mutate(AVG = round(H / AB, 3)) -> S1000
head(S1000)
S1000 %>%
arrange(desc(AVG)) -> S1000
head(S1000, 10) -> Top_AVG
Top_AVG
inner_join(Top_AVG,
select(People, playerID,
nameFirst, nameLast),
by = "playerID") -> Top_AVG
Top_AVG %>%
select(nameFirst, nameLast, AVG)
ggplot(Top_AVG,
aes(AVG, Name)) +
geom_point() +
labs(title = "Top Batting Averages in Period 1990:2020")
Top_AVG %>%
mutate(Name = paste(nameFirst, nameLast)) ->
Top_AVG
ggplot(Top_AVG,
aes(AVG, Name)) +
geom_point() +
labs(title = "Top Batting Averages in Period 1990:2020")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(Lahman)
library(dplyr)
library(ggplot2)
SeriesPost %>%
filter(round == "WS") -> WorldSeries
SeriesPost %>%
filter(round == "WS") -> WorldSeries
head(WorldSeries)
WorldSeries %>%
group_by(teamIDwinner) %>%
summarize(N = n()) %>%
arrange(desc(N)) -> Winners
head(Winners)
WorldSeries %>%
group_by(teamIDloser) %>%
summarize(N = n()) %>%
arrange(desc(N)) -> Losers
head(Losers)
inner_join(Winners, Losers,
by = c("teamIDwinner" = "teamIDloser")) ->
WL
head(WL)
WL %>%
mutate(Times = N.x + N.y) %>%
arrange(desc(Times)) %>%
head(10)
Teams %>%
filter(teamID == "NY1") %>%
select(franchID)
BattingPost %>%
filter(round == "WS") %>%
group_by(playerID) %>%
summarize(HR = sum(HR)) -> S_HR
head(S_HR)
S_HR %>%
arrange(desc(HR)) %>%
head()
inner_join(S_HR,
select(People,
playerID, nameFirst, nameLast),
by = "playerID") %>%
mutate(Name = paste(nameFirst, nameLast)) %>%
select(Name, HR) %>%
arrange(desc(HR)) %>%
head(10)
inner_join(S_HR,
select(People,
playerID, nameFirst, nameLast),
by = "playerID") %>%
mutate(Name = paste(nameFirst, nameLast)) %>%
select(Name, HR) %>%
arrange(desc(HR)) %>%
head(20)
