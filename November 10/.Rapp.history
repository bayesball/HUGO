library(dplyr)
```{r setup, include=FALSE}
library(Lahman)
library(dplyr)
library(ggplot2)
Batting %>%
Batting %>% #
  filter(yearID >= 1990,#
         yearID <= 2020) %>% #
  group_by(playerID) %>% #
  summarize(H = sum(H),#
            AB = sum(AB)) -> S
head(S)
S %>% #
  filter(AB >= 1000) -> S1000#
head(S1000)
S1000 %>% #
  mutate(AVG = round(H / AB, 3)) -> S1000#
head(S1000)
S1000 %>% #
  arrange(desc(AVG)) -> S1000
head(S1000, 10) -> Top_AVG#
Top_AVG
inner_join(Top_AVG, #
           select(People, playerID,#
                  nameFirst, nameLast),#
           by = "playerID") -> Top_AVG
Top_AVG %>% #
  select(nameFirst, nameLast, AVG)
Top_AVG %>% #
  mutate(Name = paste(nameFirst, nameLast)) ->#
  Top_AVG
ggplot(Top_AVG,#
       aes(AVG, Name)) +#
  geom_point() +#
  labs(title = "Top Batting Averages in Period 1990:2020")
library(ShinyBaseball)
LogitHomeRuns()
library(Lahman)
Batting[1, 1:4]
1 + 2
library(readr)
d <- read_csv("https://raw.githubusercontent.com/bayesball/HomeRuns2021/main/retro2021.csv")
dim(d)
problems(d)
names(d)
table(d$STATE)
table(d$EVENT_CD)
library(Lahman)
library(dplyr)
Pitching %>%
Pitching %>% #
  filter(yearID >= 1980, yearID <= 2021) %>% #
  group_by(playerID, yearID) %>%#
  summarize(SO = sum(SO),#
            IP = sum(IPouts / 3)) -> S#
head(S)
S %>% #
  filter(IP >= 100) -> S100
S100 %>% #
  mutate(SO_Rate = 9 * SO / IP) %>% #
  arrange(desc(SO_Rate)) -> S100#
head(S100)
inner_join(select(People, playerID,#
                  nameFirst, nameLast),#
           S100, by = "playerID") %>% #
  mutate(Name = paste(nameFirst, nameLast)) %>% #
  select(Name, yearID, SO_Rate)  %>% #
  arrange(desc(SO_Rate)) -> S100#
head(S100)
Pitching %>% #
  filter(yearID >= 1980, yearID <= 2021) %>% #
  group_by(playerID) %>%#
  summarize(SO = sum(SO),#
            IP = sum(IPouts / 3)) %>% #
  filter(IP >= 1000) %>% #
  mutate(SO_Rate = 9 * SO / IP) -> S_cum
inner_join(select(People, playerID,#
                  nameFirst, nameLast),#
             S_cum,#
             by = "playerID") -> S_cum
S_cum %>% #
  mutate(Name = paste(nameFirst, nameLast)) %>% #
  select(Name, IP, SO_Rate) %>% #
  arrange(desc(SO_Rate)) %>% #
  head(6)
